FORMAT: 1A

# CityLiv API Documentation
This is the API of CityLiv by Mobilizen, a Delivery As A Service company based in Paris, France.
CityLiv is a *new generation electric city transporter*. We provide a robust to technology to our drivers,
to make them faster, efficient and deliver every package with profesionalism.

More infos at [https://cityliv.fr](https://cityliv.fr)


## Workflow

### Course
The common workflow is:

* You (the Retailer) ask for a course from point A to point B.
* For both points (refered as `origin` and `destination`), you specify a contact, an address and a date range.
* A contact is like:

```json
{
  "originContact": {
    "company": "The company (optional) if the contact is working when delivery occurs",
    "firstName": "Said",
    "lastName": "Martin",
    "phoneNumber": "06 00 00 00 00"
  }
}
```

* An address has this format:

```json
{
  "destinationAddress": {
    "formattedAddress": "18 rue de Rivoli, 75004, Paris, France",
    "postalCode": "75004",
    "location": [ 2.35604, 48.8560 ]
  }
}
```
  * An address has optional fields like :
    * `digicode`,
    * `floorNumber`,
    * `apartmentNumber`,
    *  and `comments`



* If the course is accepted, you can enable webhooks to be notified every time the course's status is updated:
  * ASSIGNED
  * PICKING
  * WAITING_AT_ORIGIN
  * PICKED_UP
  * DELIVERING
  * WAITING_AT_DESTINATION
  * FAILED
  * DELIVERED



## Licences


# Group API Basics

## API Overview

We provide two environments:
* a sandbox environment, for testing and integration usage
  * https://sandbox.api.cityliv.fr
* a production environment, for your live production usage
  * https://api.cityliv.fr

We use HTTPS standards for both environments.

## How to use the CityLiv REST API

We designed the CityLiv API in a very RESTful way, so that your user experience is simple and straightforward (Wikipedia). You are able to:
* Submit data requires an HTTP POST request
* Retrieve data requires an HTTP GET request

Requests must be sent using Content-Type `application/json`. The request and response body encoding is always UTF-8.

## Formats used

* Case Sensitive Parameters
  * The field and parameter names in requests are case sensitive

* Dates
  * All date and time values are displayed according to ISO_8601 https://en.wikipedia.org/wiki/ISO_8601. The date/time property type in the specification is specified as `Date` the actual JSON type is `String`.

* Addresses
  * All address objects are determined by 3 mandatory fields:
    * `formattedAddress`: a string with the street number, the street, the postal code, the city and the country
    * `postalCode`: a string with the postal code, without space. This field is used for automatic dispatch. Example: "75015"
    * `location`: an array according to GeoJson coordinates format, two floats: [ lontitude, latitude ]. Please, be careful because many systems use other syntaxes like `latitude, longitude`. More infos at [GeoJSON Format Specification](https://tools.ietf.org/html/rfc7946). Example for Paris: `[2.3522, 48.8566]`

<!-- * Amounts All monetary amounts are given as integer numbers in cents (by default eurocents). -->
<!-- Currencies You can currently pay and wire funds in these currencies: EUR, USD, GBP, PLN, CHF, NOK, SEK, DKK -->
<!-- The ISO_4217 format is expected -->

## Response codes

The following HTTP codes are used by the API to respond to requests:

Response code |	Description
--- | ---
200 |	Request successful
201 |	Data successfully submitted
400 |	Any kind of logical error with your request (missing parameters, invalid operation, constraint violation etc.)
403 |	Access is forbidden (authentication or authorization failure)
404 |	Object not found
500 |	Internal server error - we advise you to try again later, or contact support if the problem persists
<!-- 405 |	HTTP method not allowed (for example if you try to update a read-only object) -->
<!-- 411 |	Length Required (if the request body is empty for methods that require it) -->

### Error Object

You may get a detailed error description inside an error object:
Property |	Type | 	Description and value
--- | --- | ---
code | number | Error type (see Error Codes)
message |	string |	Technical error description
<!-- Type 	string 	Error type. Can be : param_error, ressource_not_found, etc. -->
<!-- errors 	array 	The list of the issues which triggered the HTTP error -->


## Versions
The current version of the API is `0.6.0` .

In order to use the API properly, you must include the version number after the environment endpoint:
https://sandbox.api.cityliv.fr/v0.6.0/


## Authentication
In order to begin with CityLiv API, you must request a Authorization token at tech@cityliv.fr.

Then include this token in every request to begin order courses.
This token must be placed in the `Authorization` header as follow:
`Authorization : Bearer MY_SUPER_TOKEN`

This token is unique. It must not be shared and must be kept secretly inside your organization.


## Rate limiting and Quota
The API uses rate limiting to ensure the stability and reliablity for all clients, in both the production and sandbox environments. All endpoints are affected and you have a maximum amount of calls allowed in a given period.

The maximum amount of calls is 10 requests/second. If you want to up


## FAQ
* How do I get an Authorization token ?
  - Just send an email to tech@cityliv.fr and present yourself a bit.
* I can't stop getting this annoying error, could you help me ?
  - Get in touch with us at tech@cityliv.fr, we will do our best to help you.



# Group Courses

## Courses [/courses]

### Create a Course [POST]
Creates a new Course.

+ Request CourseSample
  + Headers
    Content-Type: application/json
    Authorization: Bearer MY_SUPER_TOKEN

  + Attributes (Course Base)


+ Response 201 (application/json)
  + Attributes (Course Computed)


## All Courses [/courses{?limit}]
Returns a list of your courses.

### Retrieve all Courses [GET]
+ Parameters
    + limit (number, optional) - A limit on the number of objects to be returned. Limit can range between 1 and 100 items.
        + Default: `10`

+ Request AllCourses (application/json)
    + Headers
      Authorization: Bearer MY_SUPER_TOKEN

+ Response 200 (application/json)
    + Attributes (array[Course Computed])



## Course [/courses/{id}]

+ Parameters
  + id (string, required) - The id of the desired course.

### Retrieve a Course [GET]
Retrieves the course with the given ID.

+ Request Good Id (application/json)
  + Headers
    Authorization: Bearer MY_SUPER_TOKEN
+ Response 200 (application/json)
    + Attributes (Course Computed)

+ Request Unknown Id (application/json)
  + Headers
    Authorization: Bearer MY_SUPER_TOKEN
+ Response 400 (application/json)
    + Attributes
      + error: 404 (number)
      + message: Unknown course



# Data Structures

## Course Base (object)
+ originAfter: `2017-01-20T12:00:00+02:00` (string, required) - Date
+ originBefore: `2017-01-20T12:30:00+02:00` (string, required) - Date
+ originAddress (Address Base)
+ originContact (Contact Base)

+ destinationAfter: `2017-01-20T17:35:00+02:00` (string, required) - Date
+ destinationBefore: `2017-01-20T18:05:00+02:00` (string, required) - Date
+ destinationAddress (Address Destination Base)
+ destinationContact (Contact Destination Base)



## Course Computed (object)

+ id: 151fdvb5dbg1(string)
+ shortId: 48ed9szef (string)
+ creatorId:  dez898rf5ez4f(string)
+ retailerId: 56cs89dcs5 (string)
+ status: 'CREATED', 'PENDING', 'ASSIGNED', 'PICKING', 'WAITING_AT_ORIGIN', 'PICKED_UP', 'DELIVERING', 'WAITING_AT_DESTINATION', 'DELIVERED', 'DELETED', 'FAILED' (enum) - Current status

+ createdAt: `2017-01-20T10:28:15+0200` (string) - Date
+ lastModifiedAt: `2017-01-20T16:12:09+02:00` (string) - Date

+ Include Course Base



## Course Assigned (object)
+ Include Course Computed
+ driverId (string)
+ originType: 'picking', 'delivering' (enum)
+ destinationType: 'picking', 'delivering' (enum)
+ type: 'pickAndDelivery', 'justDelivery' (enum) - Type of course
+ source: 'frichti', 'citygate', 'amazon' (enum) - Source of source
+ price: 1589 (number) - Integer and represents cents. Currency is Euro.
+ computed
  + distance: 15624 (number) - Distance in meters
  + duration: 3600 (number) - Duration in seconds

## Address Base
+ formattedAddress: 18 rue de Montesquieu, 75018 Paris, France (string, required)
+ location: 2.43, 48.458 (array, required) - GeoJson [lontitude, latitude]
+ postalCode: 75018 (string, required)
+ digicode: 7986 (string, optional)
+ floorNumber: 4ème (string, optional)
+ apartmentNumber: 242 (string, optional)
+ comments: Appt 242, au fond de la cour (string, optional)

## Address Base v2
+ type: 'HOME', 'OFFICE', 'WAREHOUSE', 'SHOP' (enum, optional)

## Address Destination Base
+ Include Address Base
+ formattedAddress: 26 rue de Rivoli, 75004 Paris, France (string, required)
+ location: 2.35604, 48.8560 (array, required) - GeoJson [lontitude, latitude]
+ postalCode: 75004 (string, required)
+ digicode: N/A (string, optional)
+ floorNumber: N/A (string, optional)
+ apartmentNumber: N/A (string, optional)
+ comments: N/A (string, optional)

## Address Computed
+ id: 4e68g4dgtb4brt8
+ creatorId: v8ergv8rt4
+ Include Address Base

## Address Destination Computed
+ id: 5e4vf98re4
+ creatorId: v8ergv8rt4
+ Include Address Destination Base

## Contact Base
+ company: CityLivInc (string)
+ firstName: Bruno  (string, required)
+ lastName: Dupuis (string, required)
+ email: bruno@citylivinc.fr (string, required)
+ phoneNumber: 06 00 00 00 14 (string, required)

## Contact Destination Base
+ company: Minute Papillote (string)
+ firstName: Jean François  (string, required)
+ lastName: Kalio (string, required)
+ email: jfk@minupapi.fr (string, required)
+ phoneNumber: 06 00 00 00 30 (string, required)


## Contact Computed
+ Include Contact Base
+ id: bv8rt874btgvs89v4
+ creatorId: vrs64bvgr4s

## Contact Destination Computed
+ Include Contact Destination Base
+ id: 4efzrv879qer4qze894
+ creatorId: vrs64bvgr4s
